# Preamble ─────────────────────────────────────────────────────────────────────

try %sh{
  kcr init kakoune
}

# Plugins ──────────────────────────────────────────────────────────────────────
evaluate-commands %sh{
  plugins="$kak_config/plugins"
  mkdir -p "$plugins"
  [ ! -e "$plugins/plug.kak" ] && \
    git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
  printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

plug "andreyorst/plug.kak" noload

plug "kak-lsp/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{

    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    # this is not necessary; the `lsp-enable-window` will take care of it
    # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

# Color scheme
plug "dracula/kakoune" theme config %{
    colorscheme dracula
}

plug "lePerdu/kakboard" config %{
  hook global WinCreate .* %{ kakboard-enable }
}

plug "andreyorst/fzf.kak" config %{
  require-module fzf
  require-module fzf-buffer
  require-module fzf-ctags
  require-module fzf-git
  require-module fzf-vcs
  require-module fzf-grep
  require-module fzf-sk-grep
  require-module fzf-project
  require-module fzf-file
  set-option global fzf_highlight_command 'bat' # 'coderay'|'highlight'|'rouge | chroma'
  set-option global fzf_file_command 'rg' # 'ag'|'fd'|'find'
  set-option global fzf_sk_grep_command "rg -niL"
  set-option global fzf_use_main_selection false
  map -docstring 'fzf mode' global user f  ':fzf-mode<ret>'
  map -docstring 'file picker' global normal <c-p> ':fzf-mode<ret>f<ret>'
  map -docstring 'buffer picker' global normal <c-b> ':fzf-mode<ret>b<ret>'
  map -docstring 'grep picker' global normal <c-g> ':fzf-mode<ret><a-g><ret>'
}

plug "andreyorst/kaktree" config %{
  hook global WinSetOption filetype=kaktree %{
   remove-highlighter buffer/numbers
   remove-highlighter buffer/matching
   remove-highlighter buffer/wrap
   remove-highlighter buffer/show-whitespaces
  }
  kaktree-enable

  map -docstring 'kaktree' global user n ':kaktree-toggle<ret>'
}

plug 'jjk96/kakoune-rainbow' %{
  set-option global rainbow_faces red green yellow blue magenta cyan
}

# Options ──────────────────────────────────────────────────────────────────────

# Indentation
set-option global indentwidth 2
#enable-detect-indent
#enable-auto-indent

# Disable indentation hooks
set-option global disabled_hooks '(?!auto)(?!detect)\K(.+)-(trim-indent|insert|indent)'

# Highlighters
add-highlighter -override global/number-lines number-lines -relative
add-highlighter -override global/show-matching show-matching

# Show whitespaces
add-highlighter -override global/show-whitespaces show-whitespaces
add-highlighter -override global/show-trailing-whitespaces regex '\h+$' '0:red+f'
add-highlighter -override global/show-non-breaking-spaces regex ' +' '0:red+f'

# Show characters
add-highlighter -override global/show-unicode-2013 regex '–' '0:green+f'
add-highlighter -override global/show-unicode-2014 regex '—' '0:green+bf'
add-highlighter -override global/show-math-symbols regex '[−×]' '0:cyan+f'
add-highlighter -override global/show-limit regex '(?S)^.{79}[=-─┈]\K\n' '0:green+f'

# Tools
set-option global makecmd 'make -j 8'
set-option global grepcmd 'rg --column'

# Windowing
# TODO: figure out tmux integration instead
#alacritty-integration-enable

# Mappings ─────────────────────────────────────────────────────────────────────

# Normal mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Hot reloading
# TODO: define source-kakrc
#map -docstring 'reload kakrc' global normal <F5> ':source-kakrc; echo reloaded kakrc<ret>'

# Editing
map -docstring 'save' global normal <c-s> ':write; echo saved<ret>'
map -docstring 'close buffer' global normal <c-w> ':delete-buffer<ret>'

# Search
map -docstring 'find' global normal / /(?i) # case-insensitive by default
# TODO: define search?
#map -docstring 'search' global normal f ':search<ret>'
map -docstring 'jump backward' global normal F <c-o>

# Selection primitives
#map -docstring 'select all occurrences of current selection' global normal <a-percent> ':select-highlights<ret>'
#map -docstring 'surround' global user s ':surround<ret>'

# Tools
#map -docstring 'math' global normal = ':math<ret>'

# Windowing
map -docstring 'new client' global normal <c-t> ':new<ret>'
map -docstring 'terminal' global normal <c-n> ':connect terminal<ret>'
#map -docstring 'file explorer' global normal <c-e> ':$ nautilus .<ret>'

# Insert mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
map -docstring 'indent' global insert <tab> '<a-;><a-gt>'
map -docstring 'unindent' global insert <s-tab> '<a-;><a-lt>'

# View mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Filetype┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Vue
hook global BufCreate .*\.vue %{
  set buffer filetype html
}

# JSON
hook global BufSetOption filetype=json %{
  set-option buffer formatcmd "jq --indent %opt{tabstop} ."
}
